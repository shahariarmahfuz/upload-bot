import os
import asyncio
import requests
from telethon import TelegramClient, events
from dotenv import load_dotenv

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
load_dotenv()

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
API_ID = "20716719"
API_HASH = "c929824683800816ddf0faac845d89c9"
BOT_TOKEN = "7479613855:AAGVHnXaJI6VmkZXbyzgmgI0G7Myi3tYR64"

# ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
UPLOAD_API_ENDPOINT = "https://molecular-angel-itachivai-e6c91c4d.koyeb.app/up"
# ‡¶®‡¶§‡ßÅ‡¶® API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (HD ‡¶è‡¶¨‡¶Ç SD ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
ADD_VIDEO_API_ENDPOINT = "https://7f8f6e2e-9c68-4880-939b-61d184b126b0-00-3n5zk13i6o9mt.sisko.replit.dev/add"
# ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
CHECK_STATUS_API_ENDPOINT_BASE = "https://molecular-angel-itachivai-e6c91c4d.koyeb.app"

# ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_states = {}
WAITING_TITLE = 0
WAITING_HD_VIDEO = 1
WAITING_SD_VIDEO = 2
IDLE = 3

async def upload_video_to_api(file_path):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        with open(file_path, 'rb') as f:
            files = {'video': f}
            response = requests.post(UPLOAD_API_ENDPOINT, files=files)

        if response.status_code == 202:
            return response.json()  # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        else:
            return None
    except Exception as e:
        print(f"Error uploading video: {e}")
        return None

async def check_processing_status(process_id):
    """‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        check_url = f"{CHECK_STATUS_API_ENDPOINT_BASE}/check_status/{process_id}"
        response = requests.get(check_url, headers={'Accept': 'application/json'})

        if response.status_code == 200:
            return response.json()  # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        else:
            return None
    except Exception as e:
        print(f"Error checking status: {e}")
        return None

def modify_dropbox_link(dropbox_link):
    """Dropbox ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá dl=0 ‡¶ï‡ßá raw=1 ‡¶§‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"""
    return dropbox_link.replace("&dl=0", "@raw=1")

async def add_hd_sd_links_to_api(hd_link, sd_link):
    """HD ‡¶è‡¶¨‡¶Ç SD ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï API ‡¶§‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        api_url = f"{ADD_VIDEO_API_ENDPOINT}?hd={hd_link}&sd={sd_link}"
        response = requests.get(api_url) # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá GET ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡ßá‡¶Æ‡¶®‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®

        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        print(f"Error adding HD and SD links: {e}")
        return None


@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_states[event.sender_id] = IDLE # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    await event.reply("Hello! Use /add {video title} to start adding a new video.")

@client.on(events.NewMessage(pattern=r'/add (.+)'))
async def add_title(event):
    """/add ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ó‡ßç‡¶∞‡¶π‡¶£"""
    title = event.pattern_match.group(1).strip()
    user_states[event.sender_id] = WAITING_HD_VIDEO
    user_states[event.sender_id] = {'state': WAITING_HD_VIDEO, 'title': title, 'hd_link': None, 'sd_link': None}
    await event.reply(f"Title '{title}' added. Now, please send the HD video.")


@client.on(events.NewMessage)
async def handle_video(event):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    sender_id = event.sender_id
    state_data = user_states.get(sender_id)

    if state_data is None:
        return # ‡¶Ø‡¶¶‡¶ø state_data ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ

    current_state = state_data.get('state', IDLE)


    if current_state == WAITING_HD_VIDEO and event.message.video:
        try:
            # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            temp_file_hd = f"temp_hd_{event.message.id}.mp4"
            await event.download_media(file=temp_file_hd)

            await event.reply("üîÑ Processing HD video...")

            # ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            upload_response_hd = await upload_video_to_api(temp_file_hd)

            if upload_response_hd:
                process_id_hd = upload_response_hd['process_id']
                hd_processed_link = None

                # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® HD
                while True:
                    status_response_hd = await check_processing_status(process_id_hd)
                    if status_response_hd:
                        if status_response_hd['status'] == 'success':
                            hd_processed_link = status_response_hd['url']
                            break
                        elif status_response_hd['status'] == 'error':
                            await event.reply(f"‚ùå HD Video Processing Error: {status_response_hd['message']}")
                            user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
                            if os.path.exists(temp_file_hd):
                                os.remove(temp_file_hd)
                            return # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá SD ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®
                    await asyncio.sleep(5)

                if hd_processed_link:
                    modified_hd_link = modify_dropbox_link(hd_processed_link)
                    user_states[sender_id]['hd_link'] = modified_hd_link
                    user_states[sender_id]['state'] = WAITING_SD_VIDEO
                    await event.reply("HD video processed and link saved. Now, please send the SD video.")
                else:
                    await event.reply("‚ö†Ô∏è Failed to process HD video.")
                    user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

            else:
                await event.reply("‚ö†Ô∏è Failed to start processing HD video.")
                user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

            # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            if os.path.exists(temp_file_hd):
                os.remove(temp_file_hd)


        except Exception as e:
            await event.reply(f"‚ùå Error processing HD video: {str(e)}")
            user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
            if os.path.exists(temp_file_hd):
                os.remove(temp_file_hd)


    elif current_state == WAITING_SD_VIDEO and event.message.video:
        try:
            # ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® SD
            temp_file_sd = f"temp_sd_{event.message.id}.mp4"
            await event.download_media(file=temp_file_sd)

            await event.reply("üîÑ Processing SD video...")

            # ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
            upload_response_sd = await upload_video_to_api(temp_file_sd)

            if upload_response_sd:
                process_id_sd = upload_response_sd['process_id']
                sd_processed_link = None

                # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® SD
                while True:
                    status_response_sd = await check_processing_status(process_id_sd)
                    if status_response_sd:
                        if status_response_sd['status'] == 'success':
                            sd_processed_link = status_response_sd['url']
                            break
                        elif status_response_sd['status'] == 'error':
                            await event.reply(f"‚ùå SD Video Processing Error: {status_response_sd['message']}")
                            user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
                            if os.path.exists(temp_file_sd):
                                os.remove(temp_file_sd)
                            return # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá HD ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®

                    await asyncio.sleep(5)

                if sd_processed_link:
                    modified_sd_link = modify_dropbox_link(sd_processed_link)
                    user_states[sender_id]['sd_link'] = modified_sd_link

                    # HD ‡¶è‡¶¨‡¶Ç SD ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï API ‡¶§‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®
                    hd_link = user_states[sender_id]['hd_link']
                    final_api_response = await add_hd_sd_links_to_api(hd_link, modified_sd_link)

                    if final_api_response and 'url' in final_api_response:
                        final_url = final_api_response['url']
                        await event.reply(f"‚úÖ Both HD and SD videos processed!\nFinal URL: {final_url}")
                    else:
                        await event.reply("‚ö†Ô∏è Failed to generate final URL.")

                    user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

                else:
                    await event.reply("‚ö†Ô∏è Failed to process SD video.")
                    user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
            else:
                await event.reply("‚ö†Ô∏è Failed to start processing SD video.")
                user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü

            # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® SD
            if os.path.exists(temp_file_sd):
                os.remove(temp_file_sd)


        except Exception as e:
            await event.reply(f"‚ùå Error processing SD video: {str(e)}")
            user_states[sender_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
            if os.path.exists(temp_file_sd):
                os.remove(temp_file_sd)
    elif current_state != IDLE and not event.message.video:
        if current_state == WAITING_HD_VIDEO:
            await event.reply("Please send the HD video.")
        elif current_state == WAITING_SD_VIDEO:
            await event.reply("Please send the SD video.")
        else:
             await event.reply("Invalid input. Please use /add {video title} to start or send HD video after adding title.")


# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
print("Bot is running...")
client.run_until_disconnected()
