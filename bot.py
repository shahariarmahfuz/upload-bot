import os
import asyncio
import requests
from telethon import TelegramClient, events, types
from dotenv import load_dotenv

# .env ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
load_dotenv()

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
API_ID = "20716719"
API_HASH = "c929824683800816ddf0faac845d89c9"
BOT_TOKEN = "7479613855:AAFaJT8jkJfUMOTRV14YoH6KyFM_Z3ZwlEc"

# ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
UPLOAD_API_ENDPOINT = "https://molecular-angel-itachivai-e6c91c4d.koyeb.app/up"
# ‡¶®‡¶§‡ßÅ‡¶® API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü (HD ‡¶è‡¶¨‡¶Ç SD ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
ADD_VIDEO_API_ENDPOINT = "https://getterlink.onrender.com/add"
# ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø API ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü
CHECK_STATUS_API_ENDPOINT_BASE = "https://molecular-angel-itachivai-e6c91c4d.koyeb.app"

# ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_states = {}
WAITING_TITLE = 0
WAITING_HD_VIDEO = 1
WAITING_SD_VIDEO = 2
WAITING_CONFIRMATION = 3
IDLE = 4
PROCESSING_ALL_EPISODES = 5

# ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_episodes_data = {}


async def upload_video_to_api(file_path):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï API-‡¶§‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        with open(file_path, 'rb') as f:
            files = {'video': f}
            response = requests.post(UPLOAD_API_ENDPOINT, files=files)

        if response.status_code == 202:
            return response.json()  # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        else:
            return None
    except Exception as e:
        print(f"Error uploading video: {e}")
        return None

async def check_processing_status(process_id):
    """‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        check_url = f"{CHECK_STATUS_API_ENDPOINT_BASE}/check_status/{process_id}"
        response = requests.get(check_url, headers={'Accept': 'application/json'})

        if response.status_code == 200:
            return response.json()  # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        else:
            return None
    except Exception as e:
        print(f"Error checking status: {e}")
        return None

def modify_dropbox_link(dropbox_link):
    """Dropbox ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá dl=0 ‡¶ï‡ßá raw=1 ‡¶§‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"""
    return dropbox_link.replace("&dl=0", "@raw=1")

async def add_hd_sd_links_to_api(hd_link, sd_link):
    """HD ‡¶è‡¶¨‡¶Ç SD ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï API ‡¶§‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"""
    try:
        api_url = f"{ADD_VIDEO_API_ENDPOINT}?hd={hd_link}&sd={sd_link}"
        response = requests.get(api_url) # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá GET ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡ßá‡¶Æ‡¶®‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®

        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        print(f"Error adding HD and SD links: {e}")
        return None


@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    """/start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    user_states[event.sender_id] = {'state': IDLE, 'episode_count': 1} # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®, episode_count ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    user_episodes_data[event.sender_id] = [] # ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    await event.reply("Hello! Use /add {video title} to start adding a new video.")

@client.on(events.NewMessage(pattern=r'/add (.+)'))
async def add_title(event):
    """/add ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ó‡ßç‡¶∞‡¶π‡¶£"""
    title = event.pattern_match.group(1).strip()
    user_id = event.sender_id
    user_states[user_id] = {'state': WAITING_HD_VIDEO, 'title': title, 'hd_file': None, 'sd_file': None, 'episode_count': 1} # episode_count ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    user_episodes_data[user_id] = [] # Ensure episode data is initialized for the user
    user_episodes_data[user_id].append({'title': title, 'hd_file': None, 'sd_file': None}) # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    await event.reply(f"Episode 1 Title '{title}' added. Now, please send the HD video for Episode 1.")


@client.on(events.NewMessage(pattern=r'/add(\d+) (.+)'))
async def add_title_n(event):
    """/add2, /add3, ... ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤ ‡¶ó‡ßç‡¶∞‡¶π‡¶£"""
    episode_number = int(event.pattern_match.group(1))
    title = event.pattern_match.group(2).strip()
    user_id = event.sender_id

    if user_states.get(user_id, {}).get('state') not in [WAITING_CONFIRMATION, IDLE, PROCESSING_ALL_EPISODES]:
        await event.reply("Please complete adding videos for the current episode or use /start to begin a new session.")
        return

    user_states[user_id] = {'state': WAITING_HD_VIDEO, 'title': title, 'hd_file': None, 'sd_file': None, 'episode_count': episode_number}
    if user_id not in user_episodes_data:
        user_episodes_data[user_id] = []
    user_episodes_data[user_id].append({'title': title, 'hd_file': None, 'sd_file': None}) # ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    await event.reply(f"Episode {episode_number} Title '{title}' added. Now, please send the HD video for Episode {episode_number}.")


@client.on(events.NewMessage(pattern='/send'))
async def send_all_episodes(event):
    """/send ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞, ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá"""
    user_id = event.sender_id
    if user_states.get(user_id, {}).get('state') == WAITING_CONFIRMATION or user_states.get(user_id, {}).get('state') == IDLE:
        if not user_episodes_data.get(user_id):
            await event.reply("No episodes added yet. Please use /add {video title} to add episodes.")
            user_states[user_id]['state'] = IDLE
            return

        user_states[user_id]['state'] = PROCESSING_ALL_EPISODES
        await event.reply("Processing all episodes...")
        await process_all_episodes(event)
    else:
        await event.reply("Please complete adding videos for the current episode or confirmation process.")


async def process_all_episodes(event):
    """‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ URL ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®"""
    user_id = event.sender_id
    episodes = user_episodes_data.get(user_id, [])
    final_links_text = ""
    all_processed = True # track if all episodes processed successfully

    for episode_index, episode_data in enumerate(episodes):
        episode_number = episode_index + 1
        title = episode_data['title']
        hd_file_path = episode_data['hd_file']
        sd_file_path = episode_data['sd_file']
        hd_processed_link = None
        sd_processed_link = None

        await event.reply(f"üé¨ Processing Episode {episode_number}: {title}...")

        # ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
        if hd_file_path:
            await event.reply(f"üîÑ Processing HD video for Episode {episode_number}...")
            upload_response_hd = await upload_video_to_api(hd_file_path)

            if upload_response_hd:
                process_id_hd = upload_response_hd['process_id']

                # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® HD
                while True:
                    status_response_hd = await check_processing_status(process_id_hd)
                    if status_response_hd:
                        if status_response_hd['status'] == 'success':
                            hd_processed_link = modify_dropbox_link(status_response_hd['url'])
                            break
                        elif status_response_hd['status'] == 'error':
                            await event.reply(f"‚ùå HD Video Processing Error for Episode {episode_number}: {status_response_hd['message']}")
                            all_processed = False # set flag to false if any episode processing fails
                            break
                    await asyncio.sleep(5)
            else:
                await event.reply(f"‚ö†Ô∏è Failed to start processing HD video for Episode {episode_number}.")
                all_processed = False # set flag to false if any episode processing fails


        # ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
        if sd_file_path:
            await event.reply(f"üîÑ Processing SD video for Episode {episode_number}...")
            upload_response_sd = await upload_video_to_api(sd_file_path)

            if upload_response_sd:
                process_id_sd = upload_response_sd['process_id']

                # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® SD
                while True:
                    status_response_sd = await check_processing_status(process_id_sd)
                    if status_response_sd:
                        if status_response_sd['status'] == 'success':
                            sd_processed_link = modify_dropbox_link(status_response_sd['url'])
                            break
                        elif status_response_sd['status'] == 'error':
                            await event.reply(f"‚ùå SD Video Processing Error for Episode {episode_number}: {status_response_sd['message']}")
                            all_processed = False # set flag to false if any episode processing fails
                            break
                    await asyncio.sleep(5)
            else:
                await event.reply(f"‚ö†Ô∏è Failed to start processing SD video for Episode {episode_number}.")
                all_processed = False # set flag to false if any episode processing fails

        # HD ‡¶è‡¶¨‡¶Ç SD ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï API ‡¶§‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶´‡¶ø‡¶®‡¶æ‡¶≤ URL ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        if hd_processed_link and sd_processed_link:
            final_api_response = await add_hd_sd_links_to_api(hd_processed_link, sd_processed_link)

            if final_api_response and 'url' in final_api_response:
                final_url = final_api_response['url']
                final_links_text += f"Episode {episode_number}: {title}\nLink: {final_url}\n\n"
            else:
                await event.reply(f"‚ö†Ô∏è Failed to generate final URL for Episode {episode_number}: {title}.")
                all_processed = False # set flag to false if any episode processing fails
        else:
             await event.reply(f"‚ö†Ô∏è Failed to process one or both videos completely for Episode {episode_number}: {title}.")
             all_processed = False # set flag to false if any episode processing fails

        # ‡¶ü‡ßá‡¶Æ‡ßç‡¶™ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® HD and SD
        if os.path.exists(episode_data['hd_file']):
            os.remove(episode_data['hd_file'])
        if os.path.exists(episode_data['sd_file']):
            os.remove(episode_data['sd_file'])


    if all_processed:
        await event.reply(f"‚úÖ All episodes processed successfully!\n\n{final_links_text}")
    else:
        await event.reply("‚ö†Ô∏è Some episodes failed to process completely. Please check error messages for details.")

    user_states[user_id]['state'] = IDLE # ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
    user_episodes_data[user_id] = [] # clear episode data after processing


@client.on(events.NewMessage)
async def handle_video(event):
    """‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    sender_id = event.sender_id
    state_data = user_states.get(sender_id)

    if state_data is None:
        return  # ‡¶Ø‡¶¶‡¶ø state_data ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ

    current_state = state_data.get('state', IDLE)
    episode_count = state_data.get('episode_count', 1) # ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶®, ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü 1

    if current_state == WAITING_HD_VIDEO and event.message.video:
        # ‡¶è‡¶á‡¶ö‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ
        episode_data = user_episodes_data[sender_id][-1] # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶®
        episode_data['hd_file'] = f"temp_hd_ep{episode_count}_{event.message.id}.mp4" # ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        await event.download_media(file=episode_data['hd_file']) # HD ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
        user_states[sender_id]['state'] = WAITING_SD_VIDEO
        await event.reply(f"HD video for Episode {episode_count} received. Now, please send the SD video for Episode {episode_count}.")

    elif current_state == WAITING_SD_VIDEO and event.message.video:
        # ‡¶è‡¶∏‡¶°‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
        episode_data = user_episodes_data[sender_id][-1] # ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶®
        episode_data['sd_file'] = f"temp_sd_ep{episode_count}_{event.message.id}.mp4" # ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        await event.download_media(file=episode_data['sd_file']) # SD ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®


        user_states[sender_id]['state'] = WAITING_CONFIRMATION
        await event.reply("SD video received. Do you want to add more episodes? (yes/no or /send to finish)")


    elif current_state != IDLE and current_state != PROCESSING_ALL_EPISODES and not event.message.video:
        if current_state == WAITING_HD_VIDEO:
            await event.reply(f"Please send the HD video for Episode {episode_count}.")
        elif current_state == WAITING_SD_VIDEO:
            await event.reply(f"Please send the SD video for Episode {episode_count}.")
        elif current_state == WAITING_CONFIRMATION:
            await event.reply("Do you want to add more episodes? (yes/no or /send to finish)")
        else:
             await event.reply("Invalid input. Please use /add {video title} to start or send HD video after adding title.")


@client.on(events.NewMessage)
async def handle_text_confirmation(event):
    """‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶®‡¶´‡¶æ‡¶∞‡ßç‡¶Æ‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø"""
    sender_id = event.sender_id
    state_data = user_states.get(sender_id)

    if state_data is None:
        return # ‡¶Ø‡¶¶‡¶ø state_data ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ

    current_state = state_data.get('state', IDLE)

    if current_state == WAITING_CONFIRMATION:
        text = event.text.strip().lower()
        if text in ['yes', 'y']:
            next_episode_number = len(user_episodes_data[sender_id]) + 1
            user_states[sender_id]['state'] = WAITING_TITLE # ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ü‡¶æ‡¶á‡¶ü‡ßá‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
            user_states[sender_id]['episode_count'] = next_episode_number # ‡¶è‡¶™‡¶ø‡¶∏‡ßã‡¶° ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
            await event.reply(f"Okay, use /add{next_episode_number} {{Title}} to add title for Episode {next_episode_number}.")
        elif text in ['no', 'n', '/send']:
            await send_all_episodes(event)
        else:
            await event.reply("Invalid confirmation. Please reply with 'yes', 'no' or use /send to finish.")
    elif current_state != IDLE and current_state != PROCESSING_ALL_EPISODES and not event.message.video and not event.message.text.startswith('/'):
         await event.reply("Invalid input. Please use /add {video title} to start or send HD video after adding title.")


# ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®
print("Bot is running...")
client.run_until_disconnected()
